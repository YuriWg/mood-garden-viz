{"ast":null,"code":"var _jsxFileName = \"/Users/wyl/Documents/GitHub/DataViz Portfolio/mood-garden-viz/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MoodGarden from './components/MoodGarden';\nimport { GlobalStyle } from './styles/GlobalStyles';\nimport { generateMockData } from './data/mockData';\nimport { colorThemes } from './utils/themes';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  // {{ 减少水平内边距 }}\n  padding: 30px 10px; // e.g., reduce horizontal padding\n  background-color: ${props => props.theme.container.mainBg};\n  transition: background-color 0.3s ease;\n`;\n_c = AppContainer;\nconst Title = styled.h1`\n  font-family: 'Chelsea Market', cursive;\n  font-size: 2.8rem;\n  color: ${props => props.theme.text.title};\n  margin-bottom: 20px;\n  margin-top: 50px;\n  text-align: center;\n  letter-spacing: 0.02em;\n`;\n\n// {{ 修改这里的 GardenContainer，让 MoodGarden 控制宽度 }}\n_c2 = Title;\nconst GardenWrapper = styled.div` // Renamed to avoid confusion\n  width: 100%;\n  // {{ 移除 max-width，由内部组件控制 }}\n  // max-width: 800px; \n  height: auto;\n  position: relative;\n  margin: 0 auto;\n  border-radius: 12px;\n  overflow: visible;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0.08); // Keep or adjust shadow\n`;\n_c3 = GardenWrapper;\nfunction App() {\n  _s();\n  const [flowerData, setFlowerData] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState('warm');\n  const themeColors = colorThemes[currentTheme].colors;\n  useEffect(() => {\n    // 在实际应用中，这里会从API获取数据\n    // 现在我们使用模拟数据\n    const data = generateMockData();\n    setFlowerData(data);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      theme: themeColors,\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        theme: themeColors,\n        children: \"2025 Mood Garden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GardenWrapper, {\n        children: /*#__PURE__*/_jsxDEV(MoodGarden, {\n          flowerData: flowerData,\n          currentTheme: currentTheme,\n          setCurrentTheme: setCurrentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"ZxKr4iB9zwcxlKSqAo9td7xF5KI=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"GardenWrapper\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","MoodGarden","GlobalStyle","generateMockData","colorThemes","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","props","theme","container","mainBg","_c","Title","h1","text","title","_c2","GardenWrapper","_c3","App","_s","flowerData","setFlowerData","currentTheme","setCurrentTheme","themeColors","colors","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/Users/wyl/Documents/GitHub/DataViz Portfolio/mood-garden-viz/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MoodGarden from './components/MoodGarden';\nimport { GlobalStyle } from './styles/GlobalStyles';\nimport { generateMockData } from './data/mockData';\nimport { colorThemes } from './utils/themes';\n\nconst AppContainer = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  // {{ 减少水平内边距 }}\n  padding: 30px 10px; // e.g., reduce horizontal padding\n  background-color: ${props => props.theme.container.mainBg};\n  transition: background-color 0.3s ease;\n`;\n\nconst Title = styled.h1`\n  font-family: 'Chelsea Market', cursive;\n  font-size: 2.8rem;\n  color: ${props => props.theme.text.title};\n  margin-bottom: 20px;\n  margin-top: 50px;\n  text-align: center;\n  letter-spacing: 0.02em;\n`;\n\n// {{ 修改这里的 GardenContainer，让 MoodGarden 控制宽度 }}\nconst GardenWrapper = styled.div` // Renamed to avoid confusion\n  width: 100%;\n  // {{ 移除 max-width，由内部组件控制 }}\n  // max-width: 800px; \n  height: auto;\n  position: relative;\n  margin: 0 auto;\n  border-radius: 12px;\n  overflow: visible;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0.08); // Keep or adjust shadow\n`;\n\nfunction App() {\n  const [flowerData, setFlowerData] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState('warm');\n  const themeColors = colorThemes[currentTheme].colors;\n  \n  useEffect(() => {\n    // 在实际应用中，这里会从API获取数据\n    // 现在我们使用模拟数据\n    const data = generateMockData();\n    setFlowerData(data);\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer theme={themeColors}>\n        <Title theme={themeColors}>2025 Mood Garden</Title>\n        {/* {{ 使用重命名后的 Wrapper }} */}\n        <GardenWrapper> \n          <MoodGarden \n            flowerData={flowerData} \n            currentTheme={currentTheme}\n            setCurrentTheme={setCurrentTheme}\n          />\n        </GardenWrapper>\n      </AppContainer>\n    </>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,YAAY,GAAGT,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,SAAS,CAACC,MAAM;AAC3D;AACA,CAAC;AAACC,EAAA,GAXIN,YAAY;AAalB,MAAMO,KAAK,GAAGhB,MAAM,CAACiB,EAAE;AACvB;AACA;AACA,WAAWN,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACM,IAAI,CAACC,KAAK;AAC1C;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GAVMJ,KAAK;AAWX,MAAMK,aAAa,GAAGrB,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACY,GAAA,GAVID,aAAa;AAYnB,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,MAAM,CAAC;EACxD,MAAM+B,WAAW,GAAGzB,WAAW,CAACuB,YAAY,CAAC,CAACG,MAAM;EAEpD/B,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMgC,IAAI,GAAG5B,gBAAgB,CAAC,CAAC;IAC/BuB,aAAa,CAACK,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACE1B,OAAA,CAACJ,WAAW;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACf9B,OAAA,CAACG,YAAY;MAACG,KAAK,EAAEiB,WAAY;MAAAG,QAAA,gBAC/B1B,OAAA,CAACU,KAAK;QAACJ,KAAK,EAAEiB,WAAY;QAAAG,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAEnD9B,OAAA,CAACe,aAAa;QAAAW,QAAA,eACZ1B,OAAA,CAACL,UAAU;UACTwB,UAAU,EAAEA,UAAW;UACvBE,YAAY,EAAEA,YAAa;UAC3BC,eAAe,EAAEA;QAAgB;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA,eACf,CAAC;AAEP;AAACZ,EAAA,CA5BQD,GAAG;AAAAc,GAAA,GAAHd,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAR,EAAA,EAAAK,GAAA,EAAAE,GAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAlB,GAAA;AAAAkB,YAAA,CAAAhB,GAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}