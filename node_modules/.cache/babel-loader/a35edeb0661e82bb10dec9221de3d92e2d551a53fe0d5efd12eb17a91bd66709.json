{"ast":null,"code":"export const Utils = {\n  generatePetal(size) {\n    const tip = size * 0.8;\n    const width = size * 0.3;\n    return `M 0,0 \n            Q ${width / 2},${tip * 0.3} ${width * 0.8},${tip * 0.7}\n            Q 0,${tip * 1.1} ${-width * 0.8},${tip * 0.7}\n            Q ${-width / 2},${tip * 0.3} 0,0`;\n  },\n  generateLeaf(size) {\n    const length = size * 1.5;\n    const width = size * 0.6;\n    return `M 0,0\n            C ${width * 0.6},${length * 0.3} ${width},${length * 0.6} ${width * 0.3},${length}\n            C ${-width * 0.3},${length * 0.8} ${-width * 0.9},${length * 0.5} ${-width * 0.4},${length * 0.2}\n            C ${-width * 0.15},${length * 0.1} ${-width * 0.05},${length * 0.05} 0,0`;\n  },\n  getFlowerPosition(d, isRandom = false, width, height, titlePadding, padding, cellSize) {\n    if (isRandom) {\n      return {\n        x: d.x,\n        y: d.y\n      };\n    }\n    return {\n      x: d.month * (width / 12) + width / 24,\n      y: titlePadding + padding + (d.day - 1) * cellSize - 10\n    };\n  },\n  // 处理引用中的 Markdown 链接\n  processText(text) {\n    // 如果文本为空、null或undefined，返回空字符串\n    if (!text) return '';\n    try {\n      // 确保文本是字符串\n      const textStr = String(text);\n\n      // 1. 处理 [[文件地址|显示文本]] 格式\n      let processed = textStr.replace(/\\[\\[(.*?)\\|(.*?)\\]\\]/g, (_, __, displayText) => {\n        return displayText.trim();\n      });\n\n      // 2. 处理 [[文件地址]] 格式\n      processed = processed.replace(/\\[\\[(.*?)\\]\\]/g, (_, path) => {\n        // 安全地提取文件名\n        const parts = path.includes('/') ? path.split('/') : [path];\n        return parts[parts.length - 1].trim();\n      });\n      return processed;\n    } catch (error) {\n      console.error(\"处理文本时出错:\", error, \"原文本:\", text);\n      // 出错时返回原始文本或空字符串\n      return String(text || '');\n    }\n  },\n  // 计算两点之间的距离\n  calculateDistance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n  },\n  // 生成随机ID\n  generateId(length = 8) {\n    return Math.random().toString(36).substring(2, 2 + length);\n  },\n  // 格式化日期\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  },\n  // 获取月份名称\n  getMonthName(monthIndex) {\n    const months = [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"];\n    return months[monthIndex - 1] || \"\";\n  },\n  // 获取月份英文简称\n  getMonthShortName(monthIndex) {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    return months[monthIndex - 1] || \"\";\n  },\n  // 截断文本\n  truncateText(text, maxLength = 100) {\n    if (!text) return '';\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  },\n  // 防抖函数\n  debounce(func, wait = 300) {\n    let timeout;\n    return function (...args) {\n      const context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n  },\n  // 节流函数\n  throttle(func, limit = 300) {\n    let inThrottle;\n    return function (...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n  // 计算平均心情值\n  calculateAverageMood(flowers) {\n    if (!flowers || flowers.length === 0) return 0;\n    const sum = flowers.reduce((acc, flower) => acc + flower.score, 0);\n    return sum / flowers.length;\n  },\n  // 获取心情分布统计\n  getMoodDistribution(flowers) {\n    if (!flowers || flowers.length === 0) return {};\n    const distribution = {};\n    for (let i = -5; i <= 5; i++) {\n      distribution[i] = 0;\n    }\n    flowers.forEach(flower => {\n      if (distribution[flower.score] !== undefined) {\n        distribution[flower.score]++;\n      }\n    });\n    return distribution;\n  }\n};","map":{"version":3,"names":["Utils","generatePetal","size","tip","width","generateLeaf","length","getFlowerPosition","d","isRandom","height","titlePadding","padding","cellSize","x","y","month","day","processText","text","textStr","String","processed","replace","_","__","displayText","trim","path","parts","includes","split","error","console","calculateDistance","x1","y1","x2","y2","Math","sqrt","pow","generateId","random","toString","substring","formatDate","date","year","getFullYear","getMonth","padStart","getDate","getMonthName","monthIndex","months","getMonthShortName","truncateText","maxLength","debounce","func","wait","timeout","args","context","clearTimeout","setTimeout","apply","throttle","limit","inThrottle","calculateAverageMood","flowers","sum","reduce","acc","flower","score","getMoodDistribution","distribution","i","forEach","undefined"],"sources":["/Users/wyl/Documents/GitHub/DataViz Portfolio/mood-garden-viz/src/utils/flowerUtils.js"],"sourcesContent":["export const Utils = {\n  generatePetal(size) {\n    const tip = size * 0.8;\n    const width = size * 0.3;\n    return `M 0,0 \n            Q ${width/2},${tip*0.3} ${width*0.8},${tip*0.7}\n            Q 0,${tip*1.1} ${-width*0.8},${tip*0.7}\n            Q ${-width/2},${tip*0.3} 0,0`;\n  },\n  \n  generateLeaf(size) {\n    const length = size * 1.5;\n    const width = size * 0.6;\n    return `M 0,0\n            C ${width*0.6},${length*0.3} ${width},${length*0.6} ${width*0.3},${length}\n            C ${-width*0.3},${length*0.8} ${-width*0.9},${length*0.5} ${-width*0.4},${length*0.2}\n            C ${-width*0.15},${length*0.1} ${-width*0.05},${length*0.05} 0,0`;\n  },\n  \n  getFlowerPosition(d, isRandom = false, width, height, titlePadding, padding, cellSize) {\n    if (isRandom) {\n      return {\n        x: d.x,\n        y: d.y\n      };\n    }\n    return {\n      x: d.month * (width / 12) + (width / 24),\n      y: titlePadding + padding + (d.day - 1) * cellSize - 10\n    };\n  },\n  \n  // 处理引用中的 Markdown 链接\n  processText(text) {\n    // 如果文本为空、null或undefined，返回空字符串\n    if (!text) return '';\n    \n    try {\n      // 确保文本是字符串\n      const textStr = String(text);\n      \n      // 1. 处理 [[文件地址|显示文本]] 格式\n      let processed = textStr.replace(/\\[\\[(.*?)\\|(.*?)\\]\\]/g, (_, __, displayText) => {\n        return displayText.trim();\n      });\n      \n      // 2. 处理 [[文件地址]] 格式\n      processed = processed.replace(/\\[\\[(.*?)\\]\\]/g, (_, path) => {\n        // 安全地提取文件名\n        const parts = path.includes('/') ? path.split('/') : [path];\n        return parts[parts.length - 1].trim();\n      });\n      \n      return processed;\n    } catch (error) {\n      console.error(\"处理文本时出错:\", error, \"原文本:\", text);\n      // 出错时返回原始文本或空字符串\n      return String(text || '');\n    }\n  },\n  \n  // 计算两点之间的距离\n  calculateDistance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n  },\n  \n  // 生成随机ID\n  generateId(length = 8) {\n    return Math.random().toString(36).substring(2, 2 + length);\n  },\n  \n  // 格式化日期\n  formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  },\n  \n  // 获取月份名称\n  getMonthName(monthIndex) {\n    const months = [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \n                    \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"];\n    return months[monthIndex - 1] || \"\";\n  },\n  \n  // 获取月份英文简称\n  getMonthShortName(monthIndex) {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    return months[monthIndex - 1] || \"\";\n  },\n  \n  // 截断文本\n  truncateText(text, maxLength = 100) {\n    if (!text) return '';\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  },\n  \n  // 防抖函数\n  debounce(func, wait = 300) {\n    let timeout;\n    return function(...args) {\n      const context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n  },\n  \n  // 节流函数\n  throttle(func, limit = 300) {\n    let inThrottle;\n    return function(...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n  \n  // 计算平均心情值\n  calculateAverageMood(flowers) {\n    if (!flowers || flowers.length === 0) return 0;\n    const sum = flowers.reduce((acc, flower) => acc + flower.score, 0);\n    return sum / flowers.length;\n  },\n  \n  // 获取心情分布统计\n  getMoodDistribution(flowers) {\n    if (!flowers || flowers.length === 0) return {};\n    \n    const distribution = {};\n    for (let i = -5; i <= 5; i++) {\n      distribution[i] = 0;\n    }\n    \n    flowers.forEach(flower => {\n      if (distribution[flower.score] !== undefined) {\n        distribution[flower.score]++;\n      }\n    });\n    \n    return distribution;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}